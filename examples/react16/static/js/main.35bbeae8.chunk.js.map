{"version":3,"sources":["../webpack/universalModuleDefinition","App.tsx","serviceWorker.ts","index.tsx"],"names":["root","factory","exports","module","define","amd","window","Home","About","App","className","to","fallback","path","exact","component","Boolean","location","hostname","match","render","props","container","ReactDOM","querySelector","document","storeTest","onGlobalStateChange","value","prev","console","log","name","setGlobalState","ignore","user","bootstrap","a","mount","unmount","unmountComponentAtNode","__POWERED_BY_QIANKUN__","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"CAAA,SAA2CA,EAAMC,GAC1B,kBAAZC,SAA0C,kBAAXC,OACxCA,OAAOD,QAAUD,IACQ,oBAAXG,QAAyBA,OAAOC,IAC9CD,OAAO,GAAIH,GACe,kBAAZC,QACdA,QAAQ,gBAAkBD,IAE1BD,EAAK,gBAAkBC,IARzB,CASGK,QAAQ,WACX,O,8YCNMC,EAAO,kBAAM,4CACbC,EAAQ,kBAAM,kDAuBLC,MArBf,WACE,OACE,yBAAKC,UAAU,OACb,kBAAC,IAAD,KACE,6BACE,kBAAC,IAAD,CAAMC,GAAG,YAAT,QACA,6BACA,kBAAC,IAAD,CAAMA,GAAG,kBAAT,UAGF,kBAAC,WAAD,CAAUC,SAAU,MAClB,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOC,KAAK,WAAWC,OAAK,EAACC,UAAWR,IACxC,kBAAC,IAAD,CAAOM,KAAK,iBAAiBE,UAAWP,SCRhCQ,QACW,cAA7BV,OAAOW,SAASC,UAEe,UAA7BZ,OAAOW,SAASC,UAEhBZ,OAAOW,SAASC,SAASC,MACvB,2DCZN,SAASC,EAAOC,GAAa,IACnBC,EAAcD,EAAdC,UACRC,IAASH,OACP,kBAAC,EAAD,MACAE,EACIA,EAAUE,cAAc,SACxBC,SAASD,cAAc,UAI/B,SAASE,EAAUL,GACjBA,EAAMM,qBACJ,SAACC,EAAYC,GAAb,OACEC,QAAQC,IAAR,iCAAsCV,EAAMW,KAA5C,MAAsDJ,EAAOC,MAC/D,GAEFR,EAAMY,eAAe,CACnBC,OAAQb,EAAMW,KACdG,KAAM,CACJH,KAAMX,EAAMW,QASX,SAAeI,IAAtB,+B,4CAAO,sBAAAC,EAAA,sDACLP,QAAQC,IAAI,mCADP,4C,sBAIA,SAAeO,EAAtB,kC,4CAAO,WAAqBjB,GAArB,SAAAgB,EAAA,sDACLP,QAAQC,IAAI,sCAAuCV,GACnDK,EAAUL,GACVD,EAAOC,GAHF,4C,sBAMA,SAAekB,EAAtB,kC,4CAAO,WAAuBlB,GAAvB,eAAAgB,EAAA,sDACGf,EAAcD,EAAdC,UACRC,IAASiB,uBACPlB,EACIA,EAAUE,cAAc,SACxBC,SAASD,cAAc,UALxB,4C,sBAdDlB,OAAemC,wBACnBrB,EAAO,ID4GH,kBAAmBsB,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLnB,QAAQmB,MAAMA,EAAMC,c","file":"static/js/main.35bbeae8.chunk.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"react16-main\"] = factory();\n\telse\n\t\troot[\"react16-main\"] = factory();\n})(window, function() {\nreturn ","import React, { Suspense } from \"react\";\nimport \"./App.css\";\nimport { BrowserRouter as Router, Route, Link, Switch } from \"react-router-dom\";\n\nconst Home = () => <h1>React1 Page</h1>;\nconst About = () => <h1>React1 About Page</h1>;\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Router>\n        <nav>\n          <Link to=\"/react16\">Home</Link>\n          <br />\n          <Link to=\"/react16/about\">About</Link>\n        </nav>\n\n        <Suspense fallback={null}>\n          <Switch>\n            <Route path=\"/react16\" exact component={Home} />\n            <Route path=\"/react16/about\" component={About} />\n          </Switch>\n        </Suspense>\n      </Router>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nfunction render(props: any) {\n  const { container } = props;\n  ReactDOM.render(\n    <App />,\n    container\n      ? container.querySelector(\"#root\")\n      : document.querySelector(\"#root\")\n  );\n}\n\nfunction storeTest(props: any) {\n  props.onGlobalStateChange(\n    (value: any, prev: any) =>\n      console.log(`[onGlobalStateChange - ${props.name}]:`, value, prev),\n    true\n  );\n  props.setGlobalState({\n    ignore: props.name,\n    user: {\n      name: props.name,\n    },\n  });\n}\n\nif (!(window as any).__POWERED_BY_QIANKUN__) {\n  render({});\n}\n\nexport async function bootstrap() {\n  console.log(\"[react16] react app bootstraped\");\n}\n\nexport async function mount(props: any) {\n  console.log(\"[react16] props from main framework\", props);\n  storeTest(props);\n  render(props);\n}\n\nexport async function unmount(props: any) {\n  const { container } = props;\n  ReactDOM.unmountComponentAtNode(\n    container\n      ? container.querySelector(\"#root\")\n      : document.querySelector(\"#root\")\n  );\n}\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}